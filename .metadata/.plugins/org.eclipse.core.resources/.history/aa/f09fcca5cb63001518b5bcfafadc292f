import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class TouchNumPad extends JPanel implements ActionListener {
	

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private JButton backspace;
	
	private JButton exclam;
	private JButton hash;
	private JButton dollar;
	private JButton percent;
	private JButton and;
	private JButton asterisk;
	private JButton plus;
	private JButton dash;
	private JButton slash;
	private JButton apost;
	private JButton equal;
	private JButton question;
	private JButton underscore;
	private JButton quote;
	private JButton braceL;
	private JButton braceR;
	private JButton or;
	private JButton tilde;
	private JButton caret;
	private JButton dot;
	
	private JButton zero;
	private JButton one;
	private JButton two;
	private JButton three;
	private JButton four;
	private JButton five;
	private JButton six;
	private JButton seven;
	private JButton eight;
	private JButton nine;
	

	private JTextField field;

	private String input = "";

	public TouchNumPad() {
		zero = new JButton("0");
		one = new JButton("1");
		two = new JButton("2");
		three = new JButton("3");
		four = new JButton("4");
		five = new JButton("5");
		six = new JButton("6");
		seven = new JButton("7");
		eight = new JButton("8");
		nine = new JButton("9");
		
		exclam = new JButton("\u0021");
		hash = new JButton("\u0023");
		dollar = new JButton("\u0024");
		percent = new JButton("\u0025");
		and = new JButton("\u0026");
		apost = new JButton("\u0027");
		asterisk = new JButton("\u002A");
		plus = new JButton("\u002B");
		dash = new JButton("\u002D");
		dot = new JButton("\u002E");
		caret = new JButton("\u005E");
		equal = new JButton("\u003D");
		question = new JButton("\u003F");
		underscore = new JButton("\u005F");
		quote = new JButton("\u00B4");
		braceL = new JButton("\u007B");
		braceR = new JButton("\u007D");
		or = new JButton("\u007C");
		tilde = new JButton("\u007E");
		slash = new JButton("\002F");
		
		backspace = new JButton("Backspace");


		this.setLayout(new GridBagLayout());
		GridBagConstraints gridC = new GridBagConstraints();
		gridC.fill = GridBagConstraints.BOTH;
		gridC.weightx = 0.5;

		gridC.gridy = 0;
		gridC.gridx = 0;
		this.add(hash, gridC);
		gridC.gridx = 1;
		this.add(dollar, gridC);
		gridC.gridx = 2;
		this.add(and, gridC);
		gridC.gridx = 3;
		this.add(underscore, gridC);
		gridC.gridx = 4;
		this.add(dash, gridC);
		gridC.gridx = 5;
		this.add(one, gridC);
		gridC.gridx = 6;
		this.add(two, gridC);
		gridC.gridx = 7;
		this.add(three, gridC);
		gridC.gridx = 8;
		this.add(question, gridC);

		gridC.gridwidth = 1;
		gridC.gridy = 1;
		gridC.gridx = 0;
		this.add(caret, gridC);
		gridC.gridx = 1;
		this.add(braceL, gridC);
		gridC.gridx = 2;
		this.add(braceR, gridC);
		gridC.gridx = 3;
		this.add(equal, gridC);
		gridC.gridx = 4;
		this.add(plus, gridC);
		gridC.gridx = 5;
		this.add(four, gridC);
		gridC.gridx = 6;
		this.add(five, gridC);
		gridC.gridx = 7;
		this.add(six, gridC);
		gridC.gridx = 8;
		this.add(exclam, gridC);

		gridC.gridwidth = 1;
		gridC.gridy = 2;
		gridC.gridx = 0;
		this.add(tilde, gridC);
		gridC.gridx = 1;
		this.add(apost, gridC);
		gridC.gridx = 2;
		this.add(or, gridC);
		gridC.gridx = 3;
		this.add(slash, gridC);
		gridC.gridx = 4;
		this.add(percent, gridC);
		gridC.gridx = 5;
		this.add(seven, gridC);
		gridC.gridx = 6;
		this.add(eight, gridC);
		gridC.gridx = 7;
		this.add(nine, gridC);
		gridC.gridx = 8;
		this.add(backspace, gridC);
		
		gridC.gridwidth = 16;
		gridC.gridheight = 5;
		
		zero.addActionListener(this);

		exclam.addActionListener(this);
		hash.addActionListener(this);
		percent.addActionListener(this);
		and.addActionListener(this);
		asterisk.addActionListener(this);
		caret.addActionListener(this);
		plus.addActionListener(this);
		dash.addActionListener(this);
		slash.addActionListener(this);
		apost.addActionListener(this);
		backspace.addActionListener(this);

		a.addActionListener(this);
		s.addActionListener(this);
		d.addActionListener(this);
		f.addActionListener(this);
		g.addActionListener(this);
		h.addActionListener(this);
		j.addActionListener(this);
		k.addActionListener(this);
		l.addActionListener(this);
		at.addActionListener(this);
		enter.addActionListener(this);

		z.addActionListener(this);
		x.addActionListener(this);
		c.addActionListener(this);
		v.addActionListener(this);
		b.addActionListener(this);
		n.addActionListener(this);
		m.addActionListener(this);
		comma.addActionListener(this);
		period.addActionListener(this);
		question.addActionListener(this);
	}

		@Override
		public void actionPerformed(ActionEvent ae) {
			// TODO Auto-generated method stub
			if (ae.getSource() == q) {
				input += "Q";
			} else if (ae.getSource() == w) {
				input += "W";
			} else if (ae.getSource() == e) {
				input += "E";
			} else if (ae.getSource() == r) {
				input += "R";
			} else if (ae.getSource() == t) {
				input += "T";
			} else if (ae.getSource() == y) {
				input += "Y";
			} else if (ae.getSource() == u) {
				input += "U";
			} else if (ae.getSource() == i) {
				input += "I";
			} else if (ae.getSource() == o) {
				input += "O";
			} else if (ae.getSource() == p) {
				input += "P";
			} else if (ae.getSource() == a) {
				input += "A";
			} else if (ae.getSource() == s) {
				input += "S";
			} else if (ae.getSource() == d) {
				input += "D";
			} else if (ae.getSource() == f) {
				input += "F";
			} else if (ae.getSource() == g) {
				input += "G";
			} else if (ae.getSource() == h) {
				input += "H";
			} else if (ae.getSource() == j) {
				input += "J";
			} else if (ae.getSource() == k) {
				input += "K";
			} else if (ae.getSource() == l) {
				input += "L";
			} else if (ae.getSource() == z) {
				input += "Z";
			} else if (ae.getSource() == x) {
				input += "X";
			} else if (ae.getSource() == c) {
				input += "C";
			} else if (ae.getSource() == v) {
				input += "V";
			} else if (ae.getSource() == b) {
				input += "B";
			} else if (ae.getSource() == n) {
				input += "N";
			} else if (ae.getSource() == m) {
				input += "M";
			} else if (ae.getSource() == backspace) {
				if (input.length() > 0) {
					input = input.substring(0, input.length() - 1);
				}
			} else if (ae.getSource() == at) {
				input += ("\u0040");
			} else if (ae.getSource() == enter) {
				// input += System.getProperty("line.separator");
			} else if (ae.getSource() == comma) {
				input += (",");
			} else if (ae.getSource() == period) {
				input += (".");
			} else if (ae.getSource() == question) {
				input += ("?");
			} else if (ae.getSource() == zero) {
				input += ("0");
			}		

			field.setText(input);
			System.out.println(input);
		}

		public String getInput() {
			return input;
		}

		public void setInput(String input) {
			this.input = input;
		}

		public void setTextField(JTextField field) {
			this.field = field;
		}

		public static void main(String[] args) {
			JFrame frame = new JFrame("TouchKeyboard");
			TouchKeyboard panel = new TouchKeyboard();
			frame.setContentPane(panel);
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.pack();

			// put the frame in the middle of the display
			Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
			frame.setLocation(dim.width / 2 - frame.getSize().width / 2, dim.height
					/ 2 - frame.getSize().height / 2);

			frame.setVisible(true);
		}
	}