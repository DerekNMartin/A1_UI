import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class TouchCharPad extends JPanel implements ActionListener {
	

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private JButton backspace;
	
	private JButton exclam;
	private JButton hash;
	private JButton dollar;
	private JButton percent;
	private JButton and;
	private JButton asterisk;
	private JButton plus;
	private JButton dash;
	private JButton slash;
	private JButton apost;
	private JButton equal;
	private JButton question;
	private JButton underscore;
	private JButton quote;
	private JButton braceL;
	private JButton braceR;
	private JButton or;
	private JButton tilde;
	private JButton caret;
	private JButton dot;
	
	private JButton zero;
	private JButton one;
	private JButton two;
	private JButton three;
	private JButton four;
	private JButton five;
	private JButton six;
	private JButton seven;
	private JButton eight;
	private JButton nine;
	

	private JTextField field;

	private String input = "";

	public TouchCharPad() {
		zero = new JButton("0");
		one = new JButton("1");
		two = new JButton("2");
		three = new JButton("3");
		four = new JButton("4");
		five = new JButton("5");
		six = new JButton("6");
		seven = new JButton("7");
		eight = new JButton("8");
		nine = new JButton("9");
		
		exclam = new JButton("\u0021");
		hash = new JButton("\u0023");
		dollar = new JButton("\u0024");
		percent = new JButton("\u0025");
		and = new JButton("\u0026");
		apost = new JButton("\u0027");
		asterisk = new JButton("\u002A");
		plus = new JButton("\u002B");
		dash = new JButton("\u002D");
		dot = new JButton("\u002E");
		caret = new JButton("\u005E");
		equal = new JButton("\u003D");
		question = new JButton("\u003F");
		underscore = new JButton("\u005F");
		quote = new JButton("\u00B4");
		braceL = new JButton("\u007B");
		braceR = new JButton("\u007D");
		or = new JButton("\u007C");
		tilde = new JButton("\u007E");
		slash = new JButton("\u002F");
		
		backspace = new JButton("Backspace");


		this.setLayout(new GridBagLayout());
		GridBagConstraints gridC = new GridBagConstraints();
		gridC.fill = GridBagConstraints.BOTH;
		gridC.weightx = 0.5;
		
		gridC.gridwidth = 1;
		gridC.gridy = 0;
		gridC.gridx = 0;
		this.add(hash, gridC);
		gridC.gridx = 1;
		this.add(dollar, gridC);
		gridC.gridx = 2;
		this.add(and, gridC);
		gridC.gridx = 3;
		this.add(underscore, gridC);
		gridC.gridx = 4;
		this.add(dash, gridC);
		gridC.gridx = 5;
		this.add(one, gridC);
		gridC.gridx = 6;
		this.add(two, gridC);
		gridC.gridx = 7;
		this.add(three, gridC);
		gridC.gridx = 8;
		this.add(backspace, gridC);
		
		gridC.gridwidth = 1;
		gridC.gridy = 1;
		gridC.gridx = 0;
		this.add(caret, gridC);
		gridC.gridx = 1;
		this.add(braceL, gridC);
		gridC.gridx = 2;
		this.add(braceR, gridC);
		gridC.gridx = 3;
		this.add(equal, gridC);
		gridC.gridx = 4;
		this.add(plus, gridC);
		gridC.gridx = 5;
		this.add(four, gridC);
		gridC.gridx = 6;
		this.add(five, gridC);
		gridC.gridx = 7;
		this.add(six, gridC);

		gridC.gridwidth = 1;
		gridC.gridy = 2;
		gridC.gridx = 0;
		this.add(tilde, gridC);
		gridC.gridx = 1;
		this.add(apost, gridC);
		gridC.gridx = 2;
		this.add(or, gridC);
		gridC.gridx = 3;
		this.add(slash, gridC);
		gridC.gridx = 4;
		this.add(percent, gridC);
		gridC.gridx = 5;
		this.add(seven, gridC);
		gridC.gridx = 6;
		this.add(eight, gridC);
		gridC.gridx = 7;
		this.add(nine, gridC);
		
		gridC.gridwidth = 1;
		gridC.gridy = 3;
		gridC.gridx = 5;
		this.add(exclam, gridC);
		gridC.gridx = 6;
		this.add(zero, gridC);
		gridC.gridx = 7;
		this.add(question, gridC);
		
		gridC.gridwidth = 15;
		gridC.gridheight = 4;
		
		
		

		exclam.addActionListener(this);
		hash.addActionListener(this);
		percent.addActionListener(this);
		and.addActionListener(this);
		asterisk.addActionListener(this);
		caret.addActionListener(this);
		plus.addActionListener(this);
		dash.addActionListener(this);
		slash.addActionListener(this);
		apost.addActionListener(this);
		equal.addActionListener(this);
		question.addActionListener(this);
		underscore.addActionListener(this);
		quote.addActionListener(this);
		braceL.addActionListener(this);
		braceR.addActionListener(this);
		or.addActionListener(this);
		tilde.addActionListener(this);
		
		backspace.addActionListener(this);
		
		zero.addActionListener(this);
		one.addActionListener(this);
		two.addActionListener(this);
		three.addActionListener(this);
		four.addActionListener(this);
		five.addActionListener(this);
		six.addActionListener(this);
		seven.addActionListener(this);
		eight.addActionListener(this);
		nine.addActionListener(this);
	}

		@Override
		public void actionPerformed(ActionEvent ae) {
			// TODO Auto-generated method stub
			if (ae.getSource() == exclam) {
				input += "!";
			} else if (ae.getSource() == hash) {
				input += "#";
			} else if (ae.getSource() == dollar) {
				input += "$";
			} else if (ae.getSource() == percent) {
				input += "%";
			} else if (ae.getSource() == and) {
				input += "&";
			} else if (ae.getSource() == asterisk) {
				input += "*";
			} else if (ae.getSource() == caret) {
				input += "^";
			} else if (ae.getSource() == plus) {
				input += "+";
			} else if (ae.getSource() == dash) {
				input += "-";
			} else if (ae.getSource() == slash) {
				input += "/";
			} else if (ae.getSource() == apost) {
				input += "'";
			} else if (ae.getSource() == equal) {
				input += "=";
			} else if (ae.getSource() == question) {
				input += "?";
			} else if (ae.getSource() == underscore) {
				input += "_";
			} else if (ae.getSource() == quote) {
				input += "`";
			} else if (ae.getSource() == braceL) {
				input += "{";
			} else if (ae.getSource() == braceR) {
				input += "}";
			} else if (ae.getSource() == or) {
				input += "|";
			} else if (ae.getSource() == tilde) {
				input += "~";
			} else if (ae.getSource() == zero) {
				input += "0";
			} else if (ae.getSource() == one) {
				input += "1";
			} else if (ae.getSource() == two) {
				input += "2";
			} else if (ae.getSource() == three) {
				input += "3";
			} else if (ae.getSource() == four) {
				input += "4";
			} else if (ae.getSource() == five) {
				input += "5";
			} else if (ae.getSource() == six) {
				input += "6";
			} else if (ae.getSource() == seven) {
				input += "7";
			} else if (ae.getSource() == eight) {
				input += "8";
			} else if (ae.getSource() == nine) {
				input += "9";
			} else if (ae.getSource() == backspace) {
				if (input.length() > 0) {
					input = input.substring(0, input.length() - 1);
				}
			}

			field.setText(input);
			System.out.println(input);
		}

		public String getInput() {
			return input;
		}

		public void setInput(String input) {
			this.input = input;
		}

		public void setTextField(JTextField field) {
			this.field = field;
		}

		public static void main(String[] args) {
			JFrame frame = new JFrame("Shift");
			TouchCharPad panel = new TouchCharPad();
			frame.setContentPane(panel);
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.pack();

			// put the frame in the middle of the display
			Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
			frame.setLocation(dim.width / 2 - frame.getSize().width / 2, dim.height
					/ 2 - frame.getSize().height / 2);

			frame.setVisible(true);
		}
	}